//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/New Input System/NewInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NewInputAction"",
    ""maps"": [
        {
            ""name"": ""BasicActionMap"",
            ""id"": ""90c570bc-2ade-4780-9b1d-0f2713ceabdd"",
            ""actions"": [
                {
                    ""name"": ""LeftAnalog"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9e7ce7c5-7dad-4f3d-8796-d95d5f7a0697"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""425a6c37-6801-4633-b3b3-4c45a3dfa242"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""f398c291-d975-4698-87ef-a5b4d0d78895"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c296a5d9-a042-4265-9b50-9b51a5a98fdf"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAnalog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Dpad"",
                    ""id"": ""2082ff50-acd8-440b-8b2a-c0ae55b9c3d9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAnalog"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9b6f0eea-49bc-4fb4-986b-ca202a40facb"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAnalog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4f47852a-b04e-457c-8d46-924d065bceff"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAnalog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d3be2bd3-1b49-4062-b110-56f15cb815a2"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAnalog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4b05d76b-0a82-4b62-93b7-d4940eff0a65"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAnalog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""92c797db-cc1e-4b24-b616-16c138d7101f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a41749b6-50cf-4603-b6cd-0d80b80e4b67"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BasicActionMap
        m_BasicActionMap = asset.FindActionMap("BasicActionMap", throwIfNotFound: true);
        m_BasicActionMap_LeftAnalog = m_BasicActionMap.FindAction("LeftAnalog", throwIfNotFound: true);
        m_BasicActionMap_Jump = m_BasicActionMap.FindAction("Jump", throwIfNotFound: true);
        m_BasicActionMap_Fire = m_BasicActionMap.FindAction("Fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasicActionMap
    private readonly InputActionMap m_BasicActionMap;
    private List<IBasicActionMapActions> m_BasicActionMapActionsCallbackInterfaces = new List<IBasicActionMapActions>();
    private readonly InputAction m_BasicActionMap_LeftAnalog;
    private readonly InputAction m_BasicActionMap_Jump;
    private readonly InputAction m_BasicActionMap_Fire;
    public struct BasicActionMapActions
    {
        private @NewInputAction m_Wrapper;
        public BasicActionMapActions(@NewInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftAnalog => m_Wrapper.m_BasicActionMap_LeftAnalog;
        public InputAction @Jump => m_Wrapper.m_BasicActionMap_Jump;
        public InputAction @Fire => m_Wrapper.m_BasicActionMap_Fire;
        public InputActionMap Get() { return m_Wrapper.m_BasicActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IBasicActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicActionMapActionsCallbackInterfaces.Add(instance);
            @LeftAnalog.started += instance.OnLeftAnalog;
            @LeftAnalog.performed += instance.OnLeftAnalog;
            @LeftAnalog.canceled += instance.OnLeftAnalog;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(IBasicActionMapActions instance)
        {
            @LeftAnalog.started -= instance.OnLeftAnalog;
            @LeftAnalog.performed -= instance.OnLeftAnalog;
            @LeftAnalog.canceled -= instance.OnLeftAnalog;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(IBasicActionMapActions instance)
        {
            if (m_Wrapper.m_BasicActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicActionMapActions @BasicActionMap => new BasicActionMapActions(this);
    public interface IBasicActionMapActions
    {
        void OnLeftAnalog(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
}
